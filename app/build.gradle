import org.mapdb.DB
import org.mapdb.DBMaker

apply plugin: 'com.android.application'
apply plugin: 'com.neenbedankt.android-apt'

ext {
    useSplits = false
}

android {
    compileSdkVersion sdkCompile
    buildToolsVersion sdkBuildTools

    defaultConfig {
        applicationId "com.ToxicBakery.app.screenshot_redaction"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        minSdkVersion sdkMinimum
        targetSdkVersion sdkTarget
        versionName "1.0"
    }

    buildTypes {
/*        ocrTest {
            applicationIdSuffix ".ocrTest"
            debuggable true
            signingConfig signingConfigs.debug
        }*/
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

/*    splits {
        abi {
            enable useSplits
            reset()
            include 'arm64-v8a', 'armeabi', 'armeabi-v7a', 'mips', 'mips64', 'x86', 'x86_64'
            universalApk !useSplits
        }
    }*/
}

repositories {
    mavenCentral()
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    androidTestCompile androidSupportAnnotations // Support annotations included to override test libs old version
    androidTestCompile androidTestRunner
    androidTestCompile androidTestRules
    androidTestCompile androidTestEspressoCore

    testCompile junit

    apt loganSquareCompiler

    compile androidAppCompat
    compile androidRecyclerView
    compile commonsIO
    compile loganSquare
    compile mapDB
    compile once
    compile photoView
    compile picasso
    compile rxAndroid
    compile rxJava
    compile rxTuples
    compile tessTwo
    compile timber
    compile versions
}

//noinspection GroovyAssignabilityCheck
task genMapDbHashSet {
    File inDir = file("resources/wordlists")
    File outDir = file("src/main/res/raw")

    inputs.dir inDir

    doLast {
        inDir.listFiles(new FilenameFilter() {
            @Override
            boolean accept(File dir, String filename) {
                return filename.startsWith("wordlist_")
            }
        }).each { wordList ->
            File outFile = new File(outDir, wordList.getName())
            if (outFile.exists() && !outFile.delete()) {
                throw new IOException("Failed to remove previously genereated dictionary")
            }

            DB db = DBMaker.fileDB(outFile)
                    .transactionDisable()
                    .make()

            Set<String> wordSet = db.hashSet("wordlist")

            new FileReader(wordList)
                    .readLines()
                    .each { it.trim() }
                    .removeIf { it.empty }
                    .each { wordSet.add(it) }

            // Cleanup
            db.commit()
            db.compact()
            db.close()
        }
    }
}

afterEvaluate {
    //noinspection GroovyAssignabilityCheck,GrUnresolvedAccess
    preDebugBuild.dependsOn genMapDbHashSet
}
